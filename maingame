import pygame

pygame.init()

# กำหนดขนาดหน้าต่าง
screen_width = 1280
screen_height = 720

# โหลดรูปภาพ
original_image = pygame.image.load('95.gif')

# โหลดตัวละคร
warden_sheet = pygame.image.load('warden3.png')
samuri_sheet = pygame.image.load('ronin3.png')

image = pygame.transform.scale(original_image, (screen_width, screen_height))

# เฟรมรูปตัวละคร
WARDEN_ANIMATION_STEPS = [10, 6, 4, 4, 9]
SAMURI_ANIMATION_STEPS = [8, 8, 4, 4, 6]

# สร้างหน้าต่าง Pygame ขนาด 1000x600
screen = pygame.display.set_mode((screen_width, screen_height))

#ขนาดตัวละคร
WARDEN_SIZE = 200
WARDEN_SCALE = 3
WARDEN_OFFSET = [88,70]
WARDEN_DATA = [WARDEN_SIZE, WARDEN_SCALE, WARDEN_OFFSET]
SAMURI_SIZE = 250
SAMURI_SCALE = 3
SAMURI_OFFSET = [110, 95]
SAMURI_DATA = [SAMURI_SIZE, SAMURI_SCALE, SAMURI_OFFSET]

pygame.display.set_caption("Project X")

class Fighter():
    def __init__(self, player, x, y, flip, data, sprite_sheet, animation_steps):
        self.player = player
        self.attacking_rect = pygame.Rect(0, 0, 0, 0)
        self.size = data[0]
        self.image_scale = data[1]
        self.offset = data[2]
        self.flip = False
        #สีหลอดเลือด
        self.white = (255, 255, 255)
        self.red = (255, 0, 0)
        self.green = (0, 255, 0)

        self.animation_list = self.load_images(sprite_sheet, animation_steps)
        self.action = 0  # 0:idle #1:run #2:jump #3:attack1 #4:attack2 #5:hit #6:death
        self.frame_index = 0
        self.image = self.animation_list[self.action][self.frame_index]
        self.update_time = pygame.time.get_ticks()
        self.rect = pygame.Rect(x, y, 80, 180)
        self.vel_y = 0
        self.running = False
        self.jump = False
        self.attacking = False
        self.attack_type = 0
        self.attack_cooldown = 0
        self.hit = False
        self.health = 130
        self.alive = True

    # หลอดเลือด
    def draw_health_bar(self, x, y):
        ratio = self.health / 100
        pygame.draw.rect(screen,self.white, (x - 2, y - 2, 525, 34))
        pygame.draw.rect(screen,self.red, (x, y, 520, 30))
        pygame.draw.rect(screen,self.green, (x, y, 400 * ratio, 30))

    # โหลดรูปอนิเมชัน
    def load_images(self, sprite_sheet, animation_steps):
        animation_list = []
        for y, animation in enumerate(animation_steps):
            temp_img_list = []
            for x in range(animation):
                temp_img = sprite_sheet.subsurface(x * self.size, y * self.size, self.size, self.size)
                temp_img_list.append(pygame.transform.scale(temp_img, (self.size * self.image_scale, self.size * self.image_scale)))
                animation_list.append(temp_img_list)
        return animation_list

    # ขยับ
    def move(self, screen_width, screen_height, target, surface):
        SPEED = 10
        GRAVITY = 2
        dx = 0
        dy = 0
        self.running = False
        self.attack_type = 0
        if self.attacking_rect.colliderect(target.rect):
            target.health -= 10
            target.hit = True

        key = pygame.key.get_pressed()

        if self.attacking == False and self.alive:
            if self.player == 1:
                if key[pygame.K_a]:
                    dx = -SPEED
                    self.running = True
                if key[pygame.K_d]:
                    dx = SPEED
                    self.running = True
                if key[pygame.K_w] and self.jump == False:
                    self.vel_y = -30
                    self.jump = True
                #โจมตี
                if key[pygame.K_j] or key[pygame.K_k]:
                    self.attack(target)
                    if key[pygame.K_j]:
                        self.attack_type = 1
                    if key[pygame.K_k]:
                        self.attack_type = 2

            if self.player == 2:
                if key[pygame.K_LEFT]:
                    dx = -SPEED
                    self.running = True
                if key[pygame.K_RIGHT]:
                    dx = SPEED
                    self.running = True
                if key[pygame.K_UP] and self.jump == False:
                    self.vel_y = -30
                    self.jump = True
                if key[pygame.K_KP1] or key[pygame.K_KP2]:
                    self.attack(target)
                    if key[pygame.K_KP1]:
                        self.attack_type = 1
                    if key[pygame.K_KP2]:
                        self.attack_type = 2

        self.vel_y += GRAVITY
        dy += self.vel_y

        if self.rect.left + dx < 0:
            dx = -self.rect.left
        if self.rect.right + dx > screen_width:
            dx = screen_width - self.rect.right
        if self.rect.bottom + dy > screen_height - 110:
            self.vel_y = 0
            self.jump = False
            dy = screen_height - 110 - self.rect.bottom

        if target.rect.centerx > self.rect.centerx:
            self.flip = False
        else:
            self.flip = True

        if self.attack_cooldown > 0:
            self.attack_cooldown -= 1

        self.rect.x += dx
        self.rect.y += dy

    # อัปเดตอนิเมชัน
    def update(self):
        if self.health <= 0:
            self.health = 0
            self.alive = False
            self.update_action(28)
        elif self.hit == True:
            self.update_action(25)
        elif self.attacking == True:
            if self.attack_type == 1:
                self.update_action(17)
            elif self.attack_type == 2:
                self.update_action(20)
        elif self.jump == True:
            self.update_action(1)
        elif self.running == True:
            self.update_action(11)
        else:
            self.update_action(0)

        animation_cooldown = 50
        #update image
        self.image = self.animation_list[self.action][self.frame_index]
        #check if enough time has passed since the last update
        if pygame.time.get_ticks() - self.update_time > animation_cooldown:
            self.frame_index += 1
            self.update_time = pygame.time.get_ticks()
        #check if the animation has finished
        if self.frame_index >= len(self.animation_list[self.action]):
            #if the player is dead then end the animation
            if self.alive == False:
                self.frame_index = len(self.animation_list[self.action]) - 1
            else:
                self.frame_index = 0
            #check if an attack was executed
                if self.action == 3 or self.action == 4:
                    self.attacking = False
                    self.attack_cooldown = 20
                #check if damage was taken
                if self.action == 5:
                    self.hit = False
                    #if the player was in the middle of an attack, then the attack is stopped
                    self.attacking = False
                    self.attack_cooldown = 20

    # การโจมตี
    def attack(self, target):
        if self.attack_cooldown == 0:
            self.attacking = True
            self.attacking_rect = pygame.Rect(self.rect.centerx - (2 * self.rect.width * self.flip), self.rect.y, 2 * self.rect.width, self.rect.height)
        if self.attacking_rect.colliderect(target.rect):
            target.health -= 10
            target.hit = True

    # อัปเดตอนิเมชัน
    def update_action(self, new_action):
        if new_action != self.action:
            self.action = new_action
            self.frame_index = 0
            self.update_time = pygame.time.get_ticks()

    def draw(self, surface):
        img = pygame.transform.flip(self.image, self.flip, False)
        #pygame.draw.rect(surface, (255, 0, 0),self.rect)
        surface.blit(img, (self.rect.x - (self.offset[0] * self.image_scale), self.rect.y - (self.offset[1] * self.image_scale)))

def attack(self, surface):
    self.attack_Rect = pygame.Rect(self.rect.centerx, self.rect.y, 2 * self.rect.width, self.rect.height)
    pygame.draw.rect(surface, (0, 255, 0), attacking_rect)

# สร้างตัวละคร Fighter สำหรับผู้เล่น 1 และ 2
fighter1_data = (80, 2, (10, 10))
fighter2_data = (80, 2, (10, 10))

fighter1 = Fighter(1, 100, 0, False, WARDEN_DATA,warden_sheet, WARDEN_ANIMATION_STEPS)
fighter2 = Fighter(2, 1070, 0, True, SAMURI_DATA,samuri_sheet, SAMURI_ANIMATION_STEPS)

# เริ่มต้นหน้าต่าง Pygame
run = True
clock = pygame.time.Clock()
FPS = 60

while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    # ปรับการเคลื่อนไหวของผู้เล่นและอัปเดตอนิเมชัน
    fighter1.move(screen_width, screen_height, fighter2, screen)
    fighter2.move(screen_width, screen_height, fighter1, screen)

    #อัปเดตการเคลื่อนไหว
    fighter1.update()
    fighter2.update()

    # ล้างหน้าจอ
    screen.fill((0, 0, 0))
    screen.blit(image, (0, 0))

    #สร้างหลอดเลือด
    fighter1.draw_health_bar( 30, 20)
    fighter2.draw_health_bar( 720, 20)  # ปรับตำแหน่งเพื่อไม่ให้ซ้อนทับกัน


    # วาดผู้เล่นบนหน้าจอ
    fighter1.draw(screen)
    fighter2.draw(screen)

    # อัปเดตหน้าจอ
    pygame.display.update()

    clock.tick(FPS)  # จำกัดอัปเดตอยู่ที่ 30 ครั้งต่อวินาที

pygame.quit()  # สิ้นสุดโปรแกรม Pygame
